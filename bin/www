#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


var io = require('socket.io')(server);
var client = [];
const sendFunc = require('../socket/send');

io.on('connection', (socket) => {
  socket.on('joinchat', (id) => {
    client[id] =socket;
  });

  socket.on('send', async (data) => {
    var partner = (client[data.receiver.id]!= null);
    const res = await sendFunc(data, partner);

    if(res.code == '1000'){
    if(client[data.sender.id]) {
      client[data.sender.id].emit('onmessage', res);
    }
    if(partner) {
      client[data.receiver.id].emit('onmessage', res);
    }
  }
  });

  socket.on('disconnect', () => {
    
    var i = client.indexOf(socket);
    console.log('Got disconnect! ' + i);
      client.splice(i, 1);
  })
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port , "0.0.0.0", () => {
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
